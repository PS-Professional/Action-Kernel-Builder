name: Kernel Build (platina)

on:
  workflow_dispatch:
    inputs:
      BUILD_TITLE:
        description: 'Custom Build Title'
        required: false
      KERNEL_TREE:
        description: 'Kernel Tree'
        default: 'https://github.com/itisFarzin/kernel_xiaomi_sdm660'
        required: true
      KERNEL_TREE_BRANCH:
        description: 'Kernel Tree Branch'
        default: 'SW-3.2.7-KSU'
        required: true
      DEFCONFIG_LOCATION:
        description: 'Defconfig location'
        default: ''
        required: false
      DEFCONFIG_NAME:
        description: 'Defconfig name'
        default: 'platina'
        required: true
      DEVICE_CODENAME:
        description: 'Device Codename'
        default: 'platina'
        required: true
      ANYKERNEL_URL:
        description: 'AnyKernel Url (leave blank if you dont want AnyKernel)'
        default: 'https://github.com/itisFarzin/AnyKernel3'
        required: false
      ANYKERNEL_BRANCH:
        description: 'AnyKernel Branch (defaults to device codename)'
        required: false
      CLANG_VERSION:
        type: choice
        description: Clang Version
        default: 'clang-r510928'
        options: 
        - 'clang-3289846'
        - 'clang-r450784e'
        - 'clang-r475365b'
        - 'clang-r487747c'
        - 'clang-r498229b'
        - 'clang-r510928'
      SEND_NOTIFICATION:
        description: 'Send Notification'
        type: boolean
        default: true
      ENABLE_KERNELSU:
        description: 'KernelSU'
        type: boolean
        default: true
      PUSH_TO_RELEASES:
        description: 'Push to releases'
        type: boolean
        default: false

jobs:
  build:
    if: github.event.repository.owner.id == github.event.sender.id
    runs-on: ubuntu-22.04
    permissions:
      contents: write
    steps:
    
    - name: Display User Inputs
      run: |
        echo "::group::User Environment Variables"
        echo "Custom Build Title: ${{ github.event.inputs.BUILD_TITLE }}"
        echo "Kernel Tree: ${{ github.event.inputs.KERNEL_TREE }}/tree/${{ github.event.inputs.KERNEL_TREE_BRANCH }}"
        echo "Device Codename: ${{ github.event.inputs.DEVICE_CODENAME }}"
        echo "AnyKernel Url: ${{ github.event.inputs.ANYKERNEL_URL }}/tree/${{ github.event.inputs.ANYKERNEL_BRANCH }}"
        echo "Clang Version: ${{ github.event.inputs.CLANG_VERSION }}"
        echo "Send Notification: ${{ fromJSON('["No", "Yes"]')[fromJSON(github.event.inputs.ENABLE_KERNELSU)] }}
        echo "KernelSU: ${{ fromJSON('["No", "Yes"]')[fromJSON(github.event.inputs.ENABLE_KERNELSU)] }}
        echo "::endgroup::"

    - name: Initialize workspace
      run: |
        mkdir workspace
        cd workspace

        echo "workspace-folder=$(pwd)" >> $GITHUB_OUTPUT
        echo "start_time=$(date +%s)" >> $GITHUB_OUTPUT
        echo "kernelsu=${{ fromJSON('["No", "Yes"]')[fromJSON(github.event.inputs.ENABLE_KERNELSU)] }}" >> $GITHUB_OUTPUT
        if [[ -z "${{ github.event.inputs.BUILD_TITLE }}" ]]; then
          echo "build_title=${{ github.event.inputs.DEVICE_CODENAME }}" >> $GITHUB_OUTPUT
        else
          echo "build_title=${{ github.event.inputs.BUILD_TITLE }}" >> $GITHUB_OUTPUT
        fi
      id: workspace

    - name: Prepare the build environment
      run: |
        sudo apt-get install flex
        sudo apt-get install libncurses5
        
        git clone https://android.googlesource.com/platform/prebuilts/gcc/linux-x86/aarch64/aarch64-linux-android-4.9 -b android-msm-redbull-4.19-android14 --depth=1
        git clone https://android.googlesource.com/platform/prebuilts/gcc/linux-x86/arm/arm-linux-androideabi-4.9 -b android-msm-redbull-4.19-android14 --depth=1
        
        wget -q https://android.googlesource.com/platform/prebuilts/clang/host/linux-x86/+archive/refs/heads/main/${{ github.event.inputs.CLANG_VERSION }}.tar.gz -O clang.tar.gz
        mkdir clang
        tar -xf clang.tar.gz -C clang

        echo "tools-folder=$(pwd)" >> $GITHUB_OUTPUT
      working-directory: ${{ steps.workspace.outputs.workspace-folder }}
      id: tools

    - name: Clone kernel source
      run: |
        git clone --depth=1 ${{ github.event.inputs.KERNEL_TREE }} -b ${{ github.event.inputs.KERNEL_TREE_BRANCH }} kernel_tree

        echo "kernel-folder=$(pwd)/kernel_tree" >> $GITHUB_OUTPUT
      working-directory: ${{ steps.workspace.outputs.workspace-folder }}
      id: kernel

    - name: Adding KernelSU
      if: ${{ steps.workspace.outputs.kernelsu == 'Yes' }}
      run: |
        # Delete old KernelSU
        if [ -d "KernelSU" ]; then
          rm -rf "KernelSU"
        fi
        if [ -d "drivers/kernelsu" ]; then
          rm -rf "drivers/kernelsu"
        fi

        curl -LSs "https://raw.githubusercontent.com/tiann/KernelSU/main/kernel/setup.sh" | bash -
      working-directory: ${{ steps.kernel.outputs.kernel-folder }}

    - name: Building kernel
      run: |
        if [ -d $DEFCONFIG_NAME ]; then location=""; else location="${{ github.event.inputs.DEFCONFIG_LOCATION }}/"; fi;
        export PATH="${{ steps.tools.outputs.tools-folder }}/aarch64-linux-android-4.9/bin:$PATH"
        export PATH="${{ steps.tools.outputs.tools-folder }}/arm-linux-androideabi-4.9/bin:$PATH"
        export PATH="${{ steps.tools.outputs.tools-folder }}/clang/bin:$PATH"
        export LD_LIBRARY_PATH="${{ steps.tools.outputs.tools-folder }}/clang/lib64:$LD_LIBRARY_PATH"
        export LD_LIBRARY_PATH="${{ steps.tools.outputs.tools-folder }}/clang/lib:$LD_LIBRARY_PATH"

        export ARCH=arm64
        export SUBARCH=ARM64
        export CLANG_TRIPLE=aarch64-linux-gnu-
        export CROSS_COMPILE=aarch64-linux-android-
        export CROSS_COMPILE_ARM32=arm-linux-androideabi-

        export KBUILD_BUILD_USER=itisFarzin
        export KBUILD_BUILD_HOST=Github

        make O=out clean mrproper CC=clang $location${{ github.event.inputs.DEFCONFIG_NAME }}_defconfig 
        make O=out CC=clang -j$(nproc --all)

        echo "elapsed_time=$(echo "$(date +%s)"-"${{ steps.workspace.outputs.start_time }}" | bc)" >> $GITHUB_OUTPUT
      working-directory: ${{ steps.kernel.outputs.kernel-folder }}
      id: build

    - name: AnyKernel3
      if: ${{ success() && github.event.inputs.ANYKERNEL_URL != '' }}
      continue-on-error: true
      run: |
        if [[ -z "${{ github.event.inputs.ANYKERNEL_BRANCH }}" ]]; then
          anykernel_branch=${{ github.event.inputs.DEVICE_CODENAME }}
        else
          anykernel_branch=${{ github.event.inputs.ANYKERNEL_BRANCH }}
        fi
        git clone --recursive --depth=1 ${{ github.event.inputs.ANYKERNEL_URL }} -b $anykernel_branch AnyKernel3

        if [ -e "Image.gz-dtb" ]; then
          cp -f Image.gz-dtb AnyKernel3
        elif [ -e "Image.gz" ]; then
          cp -f Image.gz AnyKernel3
        fi

        name=FlashableKernel-${{ github.event.inputs.DEVICE_CODENAME }}${{ fromJSON('["", "-KSU"]')[fromJSON(github.event.inputs.ENABLE_KERNELSU)] }}.zip

        cd AnyKernel3
        zip -q -r $name *
        mv $name ../
        echo "zipname=$name" >> $GITHUB_OUTPUT
      working-directory: ${{ steps.kernel.outputs.kernel-folder }}/out/arch/arm64/boot/
      id: anykernel

    - name: Check the output directory before uploading
      run: |
        ls -al ${{ steps.kernel.outputs.kernel-folder }}/out/arch/arm64/boot/

    - name: Upload to Release
      if: ${{ github.event.inputs.PUSH_TO_RELEASES == 'true' }}
      uses: softprops/action-gh-release@v1
      with:
        files: |
          ${{ steps.kernel.outputs.kernel-folder }}/out/arch/arm64/boot/Image.gz-dtb
          ${{ steps.kernel.outputs.kernel-folder }}/out/arch/arm64/boot/Image.gz
          ${{ steps.kernel.outputs.kernel-folder }}/out/arch/arm64/boot/${{ steps.anykernel.outputs.zipname }}
        name: ${{ github.event.inputs.DEVICE_CODENAME }}-${{ github.run_id }}
        tag_name: ${{ github.run_id }}
        body: |
          <b>${{ steps.workspace.outputs.build_title }}</b>
          <b>Kernel successfully built!</b>, took ${{ steps.build.outputs.elapsed_time }} seconds.
          
          <b>Kernel tree</b>: ${{ github.event.inputs.KERNEL_TREE }}/tree/${{ github.event.inputs.KERNEL_TREE_BRANCH }}
          <b>KernelSU</b>: ${{ steps.workspace.outputs.kernelsu }}
          <b>Action</b>: ${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

    - uses: actions/upload-artifact@v4
      if: ${{ success() && github.event.inputs.PUSH_TO_RELEASES != 'true' }}
      with:
        name: Image.gz-dtb
        path: ${{ steps.kernel.outputs.kernel-folder }}/out/arch/arm64/boot/Image.gz-dtb

    - uses: actions/upload-artifact@v4
      if: ${{ success() && github.event.inputs.PUSH_TO_RELEASES != 'true' }}
      with:
        name: Image.gz
        path: ${{ steps.kernel.outputs.kernel-folder }}/out/arch/arm64/boot/Image.gz

    - uses: actions/upload-artifact@v4
      if: ${{ success() && github.event.inputs.ANYKERNEL_URL != '' && github.event.inputs.PUSH_TO_RELEASES != 'true' }}
      with:
        name: ${{ steps.anykernel.outputs.zipname }}
        path: |
          ${{ steps.kernel.outputs.kernel-folder }}/out/arch/arm64/boot/AnyKernel3/
          !${{ steps.kernel.outputs.kernel-folder }}/out/arch/arm64/boot/AnyKernel3/.git
          !${{ steps.kernel.outputs.kernel-folder }}/out/arch/arm64/boot/AnyKernel3/.github

    - name: Send Telegram notification for success
      uses: appleboy/telegram-action@master
      env: 
        TELEGRAM_CHAT: ${{ secrets.TELEGRAM_CHAT }}
      if: ${{ success() && env.TELEGRAM_CHAT != '' && github.event.inputs.SEND_NOTIFICATION == 'true' }}
      with:
        to: ${{ secrets.TELEGRAM_CHAT }}
        token: ${{ secrets.TELEGRAM_TOKEN }}
        disable_web_page_preview: true
        message: |
          <b>${{ steps.workspace.outputs.build_title }}</b>
          <b>Kernel successfully built!</b>, took ${{ steps.build.outputs.elapsed_time }} seconds.
          
          <b>Kernel tree</b>: ${{ github.event.inputs.KERNEL_TREE }}/tree/${{ github.event.inputs.KERNEL_TREE_BRANCH }}
          <b>KernelSU</b>: ${{ steps.workspace.outputs.kernelsu }}
          <b>Action</b>: ${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}
        document: ${{ steps.kernel.outputs.kernel-folder }}/out/arch/arm64/boot/${{ steps.anykernel.outputs.zipname }}
        format: html

    - name: Send Telegram notification for failure
      uses: appleboy/telegram-action@master
      env: 
        TELEGRAM_CHAT: ${{ secrets.TELEGRAM_CHAT }}
      if: ${{ failure() && env.TELEGRAM_CHAT != '' && github.event.inputs.SEND_NOTIFICATION == 'true' }}
      with:
        to: ${{ secrets.TELEGRAM_CHAT }}
        token: ${{ secrets.TELEGRAM_TOKEN }}
        disable_web_page_preview: true
        message: |
          <b>${{ steps.workspace.outputs.build_title }}</b>
          <b>Failed building kernel</b>, check ${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }} for more info.
          
          <b>Kernel tree</b>: ${{ github.event.inputs.KERNEL_TREE }}/tree/${{ github.event.inputs.KERNEL_TREE_BRANCH }}
          <b>KernelSU</b>: ${{ steps.workspace.outputs.kernelsu }}
        format: html
      continue-on-error: true
